---
title: "Data Visualization"
format:
  html:
    toc: false
---

# The grammar of graphics

Data visualization is about converting variable values associated with data points, or observations, into visual elements. We often refer to that conversion as *mapping* values to visual features which we call *aesthetics*.

Let's say we have a data set (the `gapminder` data set, in this case), where for each country, we have its population, the continent it's on, mean life expectancy, and GDP (gross domestic product) per capita.

```{r}
library(dplyr)
library(gapminder)
head(gapminder::gapminder %>% filter(year == 2007))
```

We might opt to map variables as follows:

| Variable        | Aesthetic  |
|-----------------|------------|
| population      | size       |
| continent       | color      |
| life expectancy | y position |
| GDP             | x position |

![Visualization of GDP per capita versus Mean life expectancy](images/gapminder.png){width="551"}

Of course, the aesthetic elements that are available will depend on the particular style of plot.

![Some commonly used aesthetics. Source: https://clauswilke.com/dataviz/aesthetic-mapping.html](images/aesthetics.png){width="449"}

## The ggplot2 library

`ggplot2` is a library (within `tidyverse`) that implements this notion of aesthetic mappings. Each type of plot in `ggplot2` is implemented using a function starting with `geom_`.

# Common geoms

Common geoms include:

| Geom                  | Type                           |
|-----------------------|--------------------------------|
| geom_point            | Scatterplot                    |
| geom_boxplot          | Boxplot                        |
| geom_bar and geom_col | Bar plot                       |
| geom_histogram        | Histogram                      |
| geom_density          | Kernel density plot            |
| geom_jitter           | Scatterplot with random jitter |
| geom_line.            | Line plot                      |

# Aesthetic Mappings

In order to map variables in the data to aesthetic features, `ggplot2` provides the `aes()` function. For example to map a variable called `time` to the `x` position, we would specify `aes(x = time)`.

## Putting it all together

Here's how it looks in practice:

```{r}
library(ggplot2)
library(dplyr)

df <- data.frame(time = c(1, 2, 4, 7),
                 value = c(7, 4, 6, 5),
                 category = c('a', 'b', 'b', 'a'))

df %>%
  ggplot() +
  geom_point(mapping = aes(x = time, y = value, color = category),
             size = 3)
```

Notice a few things:

- We added layers to the plot using the `+` symbol.
- We added an aesthetic, `size`, which is *not* mapped to data, by adding it as another parameter to `geom_point()` -- but not as a parameter within the `aes()` mapping.
