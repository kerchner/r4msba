[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Introduction",
    "section": "",
    "text": "Welcome to R for MSBA!\nThis is a 2-half-day course designed to prepare you with the R skills that you will need to begin the GW Master of Science in Business Analytics program.\nTo maximize your learning in this workshop, I recommend that you spend most of your time in RStudio trying to replicate the code that I’m showing you, and of course trying the coding challenges. The value of this site is mainly for you to have something to refer back to later.\n\n\nInstructor\n\nDan Kerchner\nI work as a Senior Software Developer for GW Libraries and Academic Innovation. I’m also a PhD student in the GW Milken School of Public Health, in the Health Data Science, Bioinformatics program.\n\n\n\nOther resources\nI maintain GW Libraries’ “best-of” list of R resources, which you can find at https://libguides.gwu.edu/Rstats. Let me know if you have any suggestions.\n\n\nWorkshop materials",
    "crumbs": [
      "Introduction"
    ]
  },
  {
    "objectID": "import_export.html",
    "href": "import_export.html",
    "title": "Importing and Exporting Data",
    "section": "",
    "text": "Text-based data formats are very common, because they are human-readable, they don’t require any special software to read, and they can be read in by many different programming languages. Text-based formats include CSV (comma-separated values) and its variants such as TSV (tab-separated values), JSON (JavaScript Object Notation), YAML, and XML.\nWe’re going to focus on tabular formats such as CSV; by tabular, we mean that the data represented in the file is in a table format, with rows and columns. In a CSV, values going across a row are separated by commas; there can be other variants (such as TSV) that use a different character as a separator.\nA raw CSV file might look something like this:\nTime,Country Name,Country Code,GDP (current US$) [NY.GDP.MKTP.CD],\"Population, total [SP.POP.TOTL]\",\"Life expectancy at birth, total (years) [SP.DYN.LE00.IN]\"\n2014,Gabon,GAB,18203966896,1978399,66.07\n2014,\"Gambia, The\",GMB,1229461721,2164528,62.576\n2014,Georgia,GEO,17966015109,3719414,73.105\n...\nIn R, we can read such a file into our environment using the read.csv() function. Here’s how it might look:\n\n\nWrite code to read in a file from a file named mydata.csv located in your project’s data folder.\n\n\nSolution\n\n# Read a CSV file\ndata &lt;- read.csv(\"data/mydata.csv\")\nhead(data)",
    "crumbs": [
      "Importing and Exporting Data"
    ]
  },
  {
    "objectID": "data_types.html",
    "href": "data_types.html",
    "title": "Data Types and Data Structures",
    "section": "",
    "text": "R has the following basic data types:\n\nNumeric to represent numbers that may contain decimal points\nInteger to represent integer (whole number) values\nComplex to represent numbers with both a real and imaginary part: for example, 5 + 3i where i = \\sqrt{-1}\nLogical to represent TRUE and FALSE\nCharacter to represent text data: for example, \"abc\" or '123'. Note that the single or double quotes aren’t part of the value, but they are used to enclose character values to ensure they are interpreted as data rather than code, and as text rather than numbers.",
    "crumbs": [
      "Data Types and Data Structures"
    ]
  },
  {
    "objectID": "data_types.html#subsection-on-matrices",
    "href": "data_types.html#subsection-on-matrices",
    "title": "About",
    "section": "Subsection on Matrices",
    "text": "Subsection on Matrices\nmore blah",
    "crumbs": [
      "Data Types"
    ]
  },
  {
    "objectID": "functions.html",
    "href": "functions.html",
    "title": "Functions",
    "section": "",
    "text": "R can be described as primarily (but not entirely) a “functional” programming language. Most of what you will typically do in R involves using functions, and that is the usual style of R coding. Functional programming can also be a good way to approach data analysis.\n\n\n\n\n\n\n\n\nAt the Console, you can type ? followed by the name of the function (with no space in between) to bring up the help documentation for a function. For example, ?mean will bring up the help page for the mean function.",
    "crumbs": [
      "Functions"
    ]
  },
  {
    "objectID": "about.html",
    "href": "about.html",
    "title": "About",
    "section": "",
    "text": "About this site\n\n1 + 1\n\n[1] 2"
  },
  {
    "objectID": "import_export.html#example-csv",
    "href": "import_export.html#example-csv",
    "title": "About",
    "section": "",
    "text": "# Read a CSV file\ndata &lt;- read.csv(\"data/my_data.csv\")\nhead(data)",
    "crumbs": [
      "Importing and Exporting Data"
    ]
  },
  {
    "objectID": "import_export.html#challenge",
    "href": "import_export.html#challenge",
    "title": "Importing and Exporting Data",
    "section": "",
    "text": "Write code to read in a file from a file named mydata.csv located in your project’s data folder.\n\n\nSolution\n\n# Read a CSV file\ndata &lt;- read.csv(\"data/mydata.csv\")\nhead(data)",
    "crumbs": [
      "Importing and Exporting Data"
    ]
  },
  {
    "objectID": "preface.html",
    "href": "preface.html",
    "title": "Beginning a Project",
    "section": "",
    "text": "If you’re working on your laptop, you have a few choices for apps that you can use to develop code:\n\nRStudio Desktop. RStudio is probably the most widely-used app for R coding at the moment.\nPositron. Positron is new, it’s free, and it describes itself as a data science IDE. It also works well with Python.\nNotebooks such as Jupyter (for example, running with Anaconda) or Google Colab\nDataSpell. Free for students, teachers, and community, but not for others.\nOther software development apps such as VSCode\n\nYou can also use a web-based R environment. Choices include:\n\nposit.cloud. There are limitations with the free version; you can pay more for more projects, more space, more computing power, etc.\nIf you (or your institution/orgainzation) has a web server, you can install RStudio Server and access it through the web browser. You would then only be limited by the size of the server it’s running on.\n\nIf you’re aware of other good options, please let me know!",
    "crumbs": [
      "Beginning a Project"
    ]
  },
  {
    "objectID": "preface.html#in-rstudio-always-use-projects",
    "href": "preface.html#in-rstudio-always-use-projects",
    "title": "Beginning a Project",
    "section": "In RStudio, always use projects!",
    "text": "In RStudio, always use projects!\nI cannot emphasize this enough. RStudio projects allow you to keep each project separate from your other projects.\n\nBenefits of using projects\n\nYour project has its own folder, so your files don’t mix with other projects.\nYour code’s context is this folder, so file paths can be relative, not absolute. For example, this will allow you to read a file from data/myfile.csv rather than from /Users/dan/projects/project1/data/myfile.csv. This way, it doesn’t matter where your project folder is located within your computer – or the computer of anyone else who might use your code.\nRstudio remembers your open files, plots, and environment when you close a project. When you reopen it, everything is right where you left off.\nYou’ll be able to make your project a Git project/repository, because Git also assumes that each project is in its own folder.\n\nThere are other benefits as well, but these alone should sufficiently convince you to always use projects in RStudio! There should be a similar notion in other apps you might use to write your code.\n\n\nHow to make an RStudio project\nFrom the File menu, select New Project... RStudio will then ask you whether to start a project in a new directory, an existing directory, or to check out a project from a version control repository (such as GitHub).\n\n\n\nCreate New Project Wizard\n\n\nNow you’ll select which type of project to create. There is a long list here worth exploring! But for today, we’ll select the first option, New Project since we’ll be using R to focus on data analysis and visualization.\n\n\n\nNew Project Type Wizard\n\n\nBefore RStudio creates the new folder for your project, it asks you where to create the new folder on your computer. Since we don’t have any pre-existing assets for this project, choose New Directory. Here you get to choose the parent folder inside which the new project folder will be created. Which parent folder you choose really depends on how you like to organize your projects on your computer.\n\n\n\nNew Project Location Wizard\n\n\nEnter the name of the project, which will be the name of the new directory (folder), in the Directory name: box.\nClick the Browse... button to select a different parent folder. ~ represents your home folder, which will usually be something like /Users/YourName or C:\\User\\YourName depending on your operating system.",
    "crumbs": [
      "Beginning a Project"
    ]
  },
  {
    "objectID": "functions.html#how-can-i-learn-more-about-a-function",
    "href": "functions.html#how-can-i-learn-more-about-a-function",
    "title": "Functions",
    "section": "",
    "text": "At the Console, you can type ? followed by the name of the function (with no space in between) to bring up the help documentation for a function. For example, ?mean will bring up the help page for the mean function.",
    "crumbs": [
      "Functions"
    ]
  },
  {
    "objectID": "data.html",
    "href": "data.html",
    "title": "Data Downloads",
    "section": "",
    "text": "Downloads for this workshop\n\n\n\n\n\n\n\n\n\nFile\nDescription\nFormat\nDownload\n\n\n\n\nwdi.csv\nWorld Development Indicators\nCSV\nDownload\n\n\nanalysis.R\nR script for the assignment\nR\nDownload",
    "crumbs": [
      "Data downloads"
    ]
  },
  {
    "objectID": "commenting.html",
    "href": "commenting.html",
    "title": "About",
    "section": "",
    "text": "About this site\n\n1 + 1\n\n[1] 2"
  },
  {
    "objectID": "data_types.html#coercion",
    "href": "data_types.html#coercion",
    "title": "Data Types and Data Structures",
    "section": "Coercion",
    "text": "Coercion\nWe’ve used the term “coercion” to describe when a value is forced to another data type. R has many functions beginning with as. that you can use to coerce data to other types.\nFor example, to coerce any value to text, we can use as.character. For example:\n\nas.character(32.5)\n\n[1] \"32.5\"\n\n\nWhen feasible, we can also convert data to more restrictive types. So for example, we can convert 0s and 1s to logical, using as.logical():\n\nas.logical(c(1, 0, 0, NA, 1, 2))\n\n[1]  TRUE FALSE FALSE    NA  TRUE  TRUE\n\n\nNotice in this case that any number other than 0 becomes TRUE.\nAnother example:\n\nas.numeric(c('32.5', '-5', 'some text'))\n\nWarning: NAs introduced by coercion\n\n\n[1] 32.5 -5.0   NA\n\n\nNote the warning, caused by the fact that 'some text' cannot be converted to numeric.",
    "crumbs": [
      "Data Types and Data Structures"
    ]
  },
  {
    "objectID": "data_frames.html",
    "href": "data_frames.html",
    "title": "Data Frames",
    "section": "",
    "text": "Data Frames\nTBD",
    "crumbs": [
      "Data Frames"
    ]
  }
]