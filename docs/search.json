[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Introduction",
    "section": "",
    "text": "Welcome to R for MSBA!\nThis is a 2-half-day course designed to prepare you with the R skills that you will need to begin the GW Master of Science in Business Analytics program.\nTo maximize your learning in this workshop, I recommend that you spend most of your time in RStudio trying to replicate the code that I’m showing you, and of course trying the coding challenges. The value of this site is mainly for you to have something to refer back to later.\n\n\nInstructor\n\nDan Kerchner\nI work as a Senior Sofware Developer for GW Libraries and Academic Innovation. I’m also a PhD student in the GW Milken School of Public Health, in the Health Data Science, Bioinformatics program.\n\n\n\nOther resources\nI maintain GW Libraries’ “best-of” list of R resources, which you can find at https://libguides.gwu.edu/Rstats. Let me know if you have any suggestions.",
    "crumbs": [
      "Introduction"
    ]
  },
  {
    "objectID": "import_export.html",
    "href": "import_export.html",
    "title": "Importing and Exporting Data",
    "section": "",
    "text": "Write code to read in a file from a file named mydata.csv located in your project’s data folder.\n\n\nSolution\n\n# Read a CSV file\ndata &lt;- read.csv(\"data/mydata.csv\")\nhead(data)",
    "crumbs": [
      "Importing and Exporting Data"
    ]
  },
  {
    "objectID": "data_types.html",
    "href": "data_types.html",
    "title": "Data Types and Data Structures",
    "section": "",
    "text": "Basic data types\nTBD\n\n\nVectors\nA vector is an ordered collection of data values that are all the same data type.\nWe can use the c() (“combine”) function in R to combine a sequence of values into a vector. For example:\n\nvector1 &lt;- c(5, 5, 9)\nvector1\n\n[1] 5 5 9\n\n\nBy default, the index of each item is its numbered position (i.e.). But if we want, we can also label each position as well:\n\nvector2 &lt;- c(a = 5, b = 5, c = 9)\nvector2\n\na b c \n5 5 9 \n\n\nRemember that vectors contain values that are all the same type. What happens if we try to combine differently-typed values into a vector using c()?\n\n\nMatrices\nA matrix is a 2-dimensional structure that contains data that are all the same data type.\nWe can use the matrix() function in R to create a matrix from a sequence of values. For example:\n\nmatrix1 &lt;- matrix(c(5, 5, 9, 7, NA, 3), nrow = 3, ncol = 2)\nmatrix1\n\n     [,1] [,2]\n[1,]    5    7\n[2,]    5   NA\n[3,]    9    3\n\n\n\n\nLists",
    "crumbs": [
      "Data Types and Data Structures"
    ]
  },
  {
    "objectID": "data_types.html#subsection-on-matrices",
    "href": "data_types.html#subsection-on-matrices",
    "title": "About",
    "section": "Subsection on Matrices",
    "text": "Subsection on Matrices\nmore blah",
    "crumbs": [
      "Data Types"
    ]
  },
  {
    "objectID": "functions.html",
    "href": "functions.html",
    "title": "Functions",
    "section": "",
    "text": "R can be described as primarily (but not entirely) a “functional” programming language. Most of what you will typically do in R involves using functions, and that is the usual style of R coding. Functional programming can also be a good way to approach data analysis.\n\n\n\n\n\n\n\n\nAt the Console, you can type ? followed by the name of the function (with no space in between) to bring up the help documentation for a function. For example, ?mean will bring up the help page for the mean function.",
    "crumbs": [
      "Functions"
    ]
  },
  {
    "objectID": "about.html",
    "href": "about.html",
    "title": "About",
    "section": "",
    "text": "About this site\n\n1 + 1\n\n[1] 2"
  },
  {
    "objectID": "import_export.html#example-csv",
    "href": "import_export.html#example-csv",
    "title": "About",
    "section": "",
    "text": "# Read a CSV file\ndata &lt;- read.csv(\"data/my_data.csv\")\nhead(data)",
    "crumbs": [
      "Importing and Exporting Data"
    ]
  },
  {
    "objectID": "import_export.html#challenge",
    "href": "import_export.html#challenge",
    "title": "Importing and Exporting Data",
    "section": "",
    "text": "Write code to read in a file from a file named mydata.csv located in your project’s data folder.\n\n\nSolution\n\n# Read a CSV file\ndata &lt;- read.csv(\"data/mydata.csv\")\nhead(data)",
    "crumbs": [
      "Importing and Exporting Data"
    ]
  },
  {
    "objectID": "preface.html",
    "href": "preface.html",
    "title": "Beginning a Project",
    "section": "",
    "text": "If you’re working on your laptop, you have a few choices for apps that you can use to develop code:\n\nRStudio Desktop. RStudio is probably the most widely-used app for R coding at the moment.\nPositron. Positron is new, it’s free, and it describes itself as a data science IDE. It also works well with Python.\nNotebooks such as Jupyter (for example, running with Anaconda) or Google Colab\nDataSpell. Free for students, teachers, and community, but not for others.\nOther software development apps such as VSCode\n\nYou can also use a web-based R environment. Choices include:\n\nposit.cloud. There are limitations with the free version; you can pay more for more projects, more space, more computing power, etc.\nIf you (or your institution/orgainzation) has a web server, you can install RStudio Server and access it through the web browser. You would then only be limited by the size of the server it’s running on.\n\nIf you’re aware of other good options, please let me know!",
    "crumbs": [
      "Beginning a Project"
    ]
  },
  {
    "objectID": "preface.html#in-rstudio-always-use-projects",
    "href": "preface.html#in-rstudio-always-use-projects",
    "title": "Beginning a Project",
    "section": "In RStudio, always use projects!",
    "text": "In RStudio, always use projects!\nI cannot emphasize this enough. RStudio projects allow you to keep each project separate from your other projects.\n\nBenefits of using projects\n\nYour project has its own folder, so your files don’t mix with other projects.\nYour code’s context is this folder, so file paths can be relative, not absolute. For example, this will allow you to read a file from data/myfile.csv rather than from /Users/dan/projects/project1/data/myfile.csv. This way, it doesn’t matter where your project folder is located within your computer – or the computer of anyone else who might use your code.\nRstudio remembers your open files, plots, and environment when you close a project. When you reopen it, everything is right where you left off.\nYou’ll be able to make your project a Git project/repository, because Git also assumes that each project is in its own folder.\n\nThere are other benefits as well, but these alone should sufficiently convince you to always use projects in RStudio! There should be a similar notion in other apps you might use to write your code.\n\n\nHow to make an RStudio project\nFrom the File menu, select New Project... RStudio will then ask you whether to start a project in a new directory, an existing directory, or to check out a project from a version control repository (such as GitHub).",
    "crumbs": [
      "Beginning a Project"
    ]
  },
  {
    "objectID": "functions.html#how-can-i-learn-more-about-a-function",
    "href": "functions.html#how-can-i-learn-more-about-a-function",
    "title": "Functions",
    "section": "",
    "text": "At the Console, you can type ? followed by the name of the function (with no space in between) to bring up the help documentation for a function. For example, ?mean will bring up the help page for the mean function.",
    "crumbs": [
      "Functions"
    ]
  },
  {
    "objectID": "data.html",
    "href": "data.html",
    "title": "Data Downloads",
    "section": "",
    "text": "Downloads for this workshop\n\n\n\n\n\n\n\n\n\nFile\nDescription\nFormat\nDownload\n\n\n\n\nwdi.csv\nWorld Development Indicators\nCSV\nDownload\n\n\nanalysis.R\nR script for the assignment\nR\nDownload\n\n\nsample.pdf\nExample PDF instructions\nPDF\nDownload",
    "crumbs": [
      "Data Downloads"
    ]
  },
  {
    "objectID": "commenting.html",
    "href": "commenting.html",
    "title": "About",
    "section": "",
    "text": "About this site\n\n1 + 1\n\n[1] 2"
  }
]