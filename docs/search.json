[
  {
    "objectID": "data.html",
    "href": "data.html",
    "title": "Data Downloads",
    "section": "",
    "text": "Downloads for this workshop\n\n\n\n\n\n\n\n\n\nFile\nDescription\nFormat\nDownload\n\n\n\n\nwdi.csv\nWorld Development Indicators\nCSV\nDownload\n\n\nanalysis.R\nR script for the assignment\nR\nDownload",
    "crumbs": [
      "Data downloads"
    ]
  },
  {
    "objectID": "data_frames.html",
    "href": "data_frames.html",
    "title": "Data Frames",
    "section": "",
    "text": "Data frames in R represent tabular data, where each column can contain one type of variable (e.g., numeric, character, factor). Each column has a text-based name; rows can also have a name, although by default they are numbered.\n\nConstructing a data frame\nWe can either construct a data frame by using the data.frame() function, or we can also obtain a data frame as the result of a function that, for example, reads in a data file, such as read.csv().\nLet’s use data.frame() to create a simple data frame:\n\ndf &lt;- data.frame(\n  id = c('P01', 'P03', 'P04', 'P07'),\n  name = c(\"Alice\", \"Bob\", \"Charlie\", \"David\"),\n  age = c(25, 30, 35, 40),\n  score = c(90.5, 85.0, 88.5, 92.0)\n)\n\n# show the data frame\ndf\n\n   id    name age score\n1 P01   Alice  25  90.5\n2 P03     Bob  30  85.0\n3 P04 Charlie  35  88.5\n4 P07   David  40  92.0\n\n\nWe can get information about the data frame’s structure using the str() function:\n\nstr(df)\n\n'data.frame':   4 obs. of  4 variables:\n $ id   : chr  \"P01\" \"P03\" \"P04\" \"P07\"\n $ name : chr  \"Alice\" \"Bob\" \"Charlie\" \"David\"\n $ age  : num  25 30 35 40\n $ score: num  90.5 85 88.5 92\n\n\nAnd we can get the names of the columns using the names() (or colnames()) function:\n\nnames(df)\n\n[1] \"id\"    \"name\"  \"age\"   \"score\"\n\n\nWe can also get the row names using the rownames() function:\n\nrownames(df)\n\n[1] \"1\" \"2\" \"3\" \"4\"\n\n\nWe can change the column or row names by assigning new values to them:\n\ncolnames(df) &lt;- c(\"ID\", \"Name\", \"Age\", \"Score\")\n\ndf\n\n   ID    Name Age Score\n1 P01   Alice  25  90.5\n2 P03     Bob  30  85.0\n3 P04 Charlie  35  88.5\n4 P07   David  40  92.0\n\n\n…although generally it’s more convenient to use the dplyr::rename() function instead, as it allows you to rename specific columns without affecting the others.\n\n\nAccessing data frame elements\nWe can access elements of a data frame using the $ operator, which allows us to select a specific column by name. For example, to access the Age column:\n\ndf$Age\n\n[1] 25 30 35 40\n\n\nNote that each column of a data frame is an R vector, so when you access a column, you get back a vector.\n\n\n“Binding” data frames together\nWe can also combine data frames using the rbind() and cbind() functions. The rbind() (“row bind”) function combines data frames by rows (i.e., it adds more rows), while the cbind() (“column bind”) function combines data frames by columns (i.e., it adds more columns).\nNote that when using rbind(), the data frames must have the same columns (i.e., the same exact names and types), and when using cbind(), the data frames must have the same number of rows.\n\ndf1 &lt;- data.frame(\n  id = c('P01', 'P03'),\n  name = c(\"Alice\", \"Bob\"),\n  age = c(25, 30),\n  score = c(90.5, 85.0)\n)\ndf2 &lt;- data.frame(\n  id = c('P04', 'P07'),\n  name = c(\"Charlie\", \"David\"),\n  age = c(35, 40),\n  score = c(88.5, 92.0)\n)\n\ndf &lt;- rbind(df1, df2)\n\ndf\n\n   id    name age score\n1 P01   Alice  25  90.5\n2 P03     Bob  30  85.0\n3 P04 Charlie  35  88.5\n4 P07   David  40  92.0",
    "crumbs": [
      "Data Frames"
    ]
  },
  {
    "objectID": "preface.html",
    "href": "preface.html",
    "title": "Beginning a Project",
    "section": "",
    "text": "If you’re working on your laptop, you have a few choices for apps that you can use to develop code:\n\nRStudio Desktop. RStudio is probably the most widely-used app for R coding at the moment.\nPositron. Positron is new, it’s free, and it describes itself as a data science IDE. It also works well with Python.\nNotebooks such as Jupyter (for example, running with Anaconda) or Google Colab\nDataSpell. Free for students, teachers, and community, but not for others.\nOther software development apps such as VSCode\n\nYou can also use a web-based R environment. Choices include:\n\nposit.cloud. There are limitations with the free version; you can pay more for more projects, more space, more computing power, etc.\nIf you (or your institution/orgainzation) has a web server, you can install RStudio Server and access it through the web browser. You would then only be limited by the size of the server it’s running on.\n\nIf you’re aware of other good options, please let me know!",
    "crumbs": [
      "Beginning a Project"
    ]
  },
  {
    "objectID": "preface.html#in-rstudio-always-use-projects",
    "href": "preface.html#in-rstudio-always-use-projects",
    "title": "Beginning a Project",
    "section": "In RStudio, always use projects!",
    "text": "In RStudio, always use projects!\nI cannot emphasize this enough. RStudio projects allow you to keep each project separate from your other projects.\n\nBenefits of using projects\n\nYour project has its own folder, so your files don’t mix with other projects.\nYour code’s context is this folder, so file paths can be relative, not absolute. For example, this will allow you to read a file from data/myfile.csv rather than from /Users/dan/projects/project1/data/myfile.csv. This way, it doesn’t matter where your project folder is located within your computer – or the computer of anyone else who might use your code.\nRstudio remembers your open files, plots, and environment when you close a project. When you reopen it, everything is right where you left off.\nYou’ll be able to make your project a Git project/repository, because Git also assumes that each project is in its own folder.\n\nThere are other benefits as well, but these alone should sufficiently convince you to always use projects in RStudio! There should be a similar notion in other apps you might use to write your code.\n\n\nHow to make an RStudio project\nFrom the File menu, select New Project... RStudio will then ask you whether to start a project in a new directory, an existing directory, or to check out a project from a version control repository (such as GitHub).\n\n\n\nCreate New Project Wizard\n\n\nNow you’ll select which type of project to create. There is a long list here worth exploring! But for today, we’ll select the first option, New Project since we’ll be using R to focus on data analysis and visualization.\n\n\n\nNew Project Type Wizard\n\n\nBefore RStudio creates the new folder for your project, it asks you where to create the new folder on your computer. Since we don’t have any pre-existing assets for this project, choose New Directory. Here you get to choose the parent folder inside which the new project folder will be created. Which parent folder you choose really depends on how you like to organize your projects on your computer.\n\n\n\nNew Project Location Wizard\n\n\nEnter the name of the project, which will be the name of the new directory (folder), in the Directory name: box.\nClick the Browse... button to select a different parent folder. ~ represents your home folder, which will usually be something like /Users/YourName or C:\\User\\YourName depending on your operating system.",
    "crumbs": [
      "Beginning a Project"
    ]
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Introduction",
    "section": "",
    "text": "Welcome to R for MSBA!\nThis is a 2-half-day course designed to prepare you with the R skills that you will need to begin the GW Master of Science in Business Analytics program.\nTo maximize your learning in this workshop, I recommend that you spend most of your time in RStudio trying to replicate the code that I’m showing you, and of course trying the coding challenges. The value of this site is mainly for you to have something to refer back to later.\n\n\nInstructor\n\nDan Kerchner\nI work as a Senior Software Developer for GW Libraries and Academic Innovation. I’m also a PhD student in the GW Milken School of Public Health, in the Health Data Science, Bioinformatics program.\n\n\n\nOther resources\nI maintain GW Libraries’ “best-of” list of R resources, which you can find at https://libguides.gwu.edu/Rstats. Let me know if you have any suggestions.\n\n\nWorkshop materials",
    "crumbs": [
      "Introduction"
    ]
  },
  {
    "objectID": "syntax.html",
    "href": "syntax.html",
    "title": "Quick intro to R syntax",
    "section": "",
    "text": "R code is composed of statements and expressions:\n\nStatements perform actions. The most common statements would be:\n\nAssignment statements, which assign values to variables. For example, the statement x &lt;- 5 assigns the value 5 to the variable x. Note that &lt;- is the assignment operator in R. It assigns the value on the right to the variable, or object, on the left. If x already had a value, that value will be replaced, or overwritten, by the new value.\nFunction calls, which execute functions. For example, the statement print(x) calls the print function to display the value of x. We’ll delve more into what functions look like shortly.\n\nExpressions are blocks of code that, when evaluated, have some value. For example, 3 + 4 is an expression that evaluates to 7. If x currently has the value of 2, then the expression x &gt; 1 evaluates to TRUE.\n\nExpressions are often embedded in assignment statements, such as in the assignment statement y &lt;- 3 + 4. When R sees an assignment statement, first it evaluates the right side, then it assigns that result to the variable named on the left. So in this case, R would evaluate the expression 3 + 4 to get 7, then it would assign that value to the variable y.\n\n\n\nVariables allow us to use names (such as x or patient_data) to refer to data that is stored in our R environment. The data that a variable or object name refers to can be of many different types, such as an individual number, a sequence of text values, a matrix of numbers, or a complicated structure that holds multiple types of data.\nVariable names can contain letters, numbers, periods, and underscores. They must start with a letter or a period (but not a period followed by a number). Variable names are case-sensitive, so year and Year would be considered different variables.\n\n\n\nComments are lines of text that are not executed as code. You can use them to explain and document the code, making it easier to understand. It can also be handy to “comment out” a line of code in order to temporarily disable it.\nIn R, comments start with the # symbol. Everything on a line after the # is considered a comment and is ignored by R when the code is run. So the entire line might start with #, or there might be code first and then a comment at the end of the line starting with #. For example:\n# This is a comment, but the next line is code that will run\nx &lt;- 5\n\ny &lt;- x + 2  # The code to the left will run, but everything after the # is a comment and will not be run\n\n\n\nWe tend to use a lot of functions in R. Functions are blocks of code that perform specific tasks. They take inputs (called arguments or parameters), process them, and usually* return an output (* some functions, by design, don’t return an output). A function might be used like this:\n# Call add_two_numbers and assign the result to sum_of_two_numbers\nsum_of_two_numbers &lt;- add_two_numbers(5, 9)\nLater we will explain how to create your very own functions!",
    "crumbs": [
      "Quick intro to R syntax"
    ]
  },
  {
    "objectID": "syntax.html#basics",
    "href": "syntax.html#basics",
    "title": "Quick intro to R syntax",
    "section": "",
    "text": "R code is composed of statements and expressions:\n\nStatements perform actions. The most common statements would be:\n\nAssignment statements, which assign values to variables. For example, the statement x &lt;- 5 assigns the value 5 to the variable x. Note that &lt;- is the assignment operator in R. It assigns the value on the right to the variable, or object, on the left. If x already had a value, that value will be replaced, or overwritten, by the new value.\nFunction calls, which execute functions. For example, the statement print(x) calls the print function to display the value of x. We’ll delve more into what functions look like shortly.\n\nExpressions are blocks of code that, when evaluated, have some value. For example, 3 + 4 is an expression that evaluates to 7. If x currently has the value of 2, then the expression x &gt; 1 evaluates to TRUE.\n\nExpressions are often embedded in assignment statements, such as in the assignment statement y &lt;- 3 + 4. When R sees an assignment statement, first it evaluates the right side, then it assigns that result to the variable named on the left. So in this case, R would evaluate the expression 3 + 4 to get 7, then it would assign that value to the variable y.",
    "crumbs": [
      "Quick intro to R syntax"
    ]
  },
  {
    "objectID": "syntax.html#variables-a.k.a.-objects",
    "href": "syntax.html#variables-a.k.a.-objects",
    "title": "Quick intro to R syntax",
    "section": "",
    "text": "Variables allow us to use names (such as x or patient_data) to refer to data that is stored in our R environment. The data that a variable or object name refers to can be of many different types, such as an individual number, a sequence of text values, a matrix of numbers, or a complicated structure that holds multiple types of data.\nVariable names can contain letters, numbers, periods, and underscores. They must start with a letter or a period (but not a period followed by a number). Variable names are case-sensitive, so year and Year would be considered different variables.",
    "crumbs": [
      "Quick intro to R syntax"
    ]
  },
  {
    "objectID": "syntax.html#comments",
    "href": "syntax.html#comments",
    "title": "Quick intro to R syntax",
    "section": "",
    "text": "Comments are lines of text that are not executed as code. You can use them to explain and document the code, making it easier to understand. It can also be handy to “comment out” a line of code in order to temporarily disable it.\nIn R, comments start with the # symbol. Everything on a line after the # is considered a comment and is ignored by R when the code is run. So the entire line might start with #, or there might be code first and then a comment at the end of the line starting with #. For example:\n# This is a comment, but the next line is code that will run\nx &lt;- 5\n\ny &lt;- x + 2  # The code to the left will run, but everything after the # is a comment and will not be run",
    "crumbs": [
      "Quick intro to R syntax"
    ]
  },
  {
    "objectID": "syntax.html#functions",
    "href": "syntax.html#functions",
    "title": "Quick intro to R syntax",
    "section": "",
    "text": "We tend to use a lot of functions in R. Functions are blocks of code that perform specific tasks. They take inputs (called arguments or parameters), process them, and usually* return an output (* some functions, by design, don’t return an output). A function might be used like this:\n# Call add_two_numbers and assign the result to sum_of_two_numbers\nsum_of_two_numbers &lt;- add_two_numbers(5, 9)\nLater we will explain how to create your very own functions!",
    "crumbs": [
      "Quick intro to R syntax"
    ]
  },
  {
    "objectID": "commenting.html",
    "href": "commenting.html",
    "title": "About",
    "section": "",
    "text": "About this site\n\n1 + 1\n\n[1] 2"
  },
  {
    "objectID": "functions.html",
    "href": "functions.html",
    "title": "Functions",
    "section": "",
    "text": "R can be described as primarily (but not entirely) a “functional” programming language. Most of what you will typically do in R involves using functions, and that is the usual style of R coding. Functional programming can also be a good way to approach data analysis.\n\n\nA function consists of the name of the function, followed by parentheses (), which may contain arguments (also called parameters). For example, here is a function call to the mean function, which computes the mean of a numeric vector:\n\nmy_numbers &lt;- c(-50, 1, 2, 3, 4, 5, 100, 101, 600)\nmean(my_numbers)\n\n[1] 85.11111\n\n\nFunctions may have many parameters, in which case we generally name the parameters when we call the function. For example, the mean function has a second parameter called trim, which specifies how much of the data to “trim” from each end before computing the mean. The default value is 0, meaning no trimming. But we can specify a different value if we want:\n\nmean(my_numbers, trim = 0.2)\n\n[1] 30.85714\n\n\nParameters are implicitly passed “in order” based on the way the function is defined, which you can see in the documentation (see the next section!). So if you don’t name the parameters, you have to pass them in the correct order. For example, this is equivalent to the previous call:\n\nmean(my_numbers, 0.2)\n\n[1] 30.85714\n\n\nHowever, it’s usually better style to name the parameters, especially if there are many of them.\n\n\n\nAt the Console, you can type ? followed by the name of the function (with no space in between) to bring up the help documentation for a function. For example, ?mean will bring up the help page for the mean function.",
    "crumbs": [
      "Functions"
    ]
  },
  {
    "objectID": "functions.html#how-can-i-learn-more-about-a-function",
    "href": "functions.html#how-can-i-learn-more-about-a-function",
    "title": "Functions",
    "section": "",
    "text": "At the Console, you can type ? followed by the name of the function (with no space in between) to bring up the help documentation for a function. For example, ?mean will bring up the help page for the mean function.",
    "crumbs": [
      "Functions"
    ]
  },
  {
    "objectID": "data_types.html",
    "href": "data_types.html",
    "title": "Data Types and Data Structures",
    "section": "",
    "text": "R has the following basic data types:\n\nNumeric to represent numbers that may contain decimal points\nInteger to represent integer (whole number) values\nComplex to represent numbers with both a real and imaginary part: for example, 5 + 3i where i = \\sqrt{-1}\nLogical to represent TRUE and FALSE\nCharacter to represent text data: for example, \"abc\" or '123'. Note that the single or double quotes aren’t part of the value, but they are used to enclose character values to ensure they are interpreted as data rather than code, and as text rather than numbers.",
    "crumbs": [
      "Data Types and Data Structures"
    ]
  },
  {
    "objectID": "data_types.html#coercion",
    "href": "data_types.html#coercion",
    "title": "Data Types and Data Structures",
    "section": "Coercion",
    "text": "Coercion\nWe’ve used the term “coercion” to describe when a value is forced to another data type. R has many functions beginning with as. that you can use to coerce data to other types.\nFor example, to coerce any value to text, we can use as.character. For example:\n\nas.character(32.5)\n\n[1] \"32.5\"\n\n\nWhen feasible, we can also convert data to more restrictive types. So for example, we can convert 0s and 1s to logical, using as.logical():\n\nas.logical(c(1, 0, 0, NA, 1, 2))\n\n[1]  TRUE FALSE FALSE    NA  TRUE  TRUE\n\n\nNotice in this case that any number other than 0 becomes TRUE.\nAnother example:\n\nas.numeric(c('32.5', '-5', 'some text'))\n\nWarning: NAs introduced by coercion\n\n\n[1] 32.5 -5.0   NA\n\n\nNote the warning, caused by the fact that 'some text' cannot be converted to numeric.",
    "crumbs": [
      "Data Types and Data Structures"
    ]
  },
  {
    "objectID": "about.html",
    "href": "about.html",
    "title": "About",
    "section": "",
    "text": "About this site\n\n1 + 1\n\n[1] 2"
  },
  {
    "objectID": "logical_tests.html",
    "href": "logical_tests.html",
    "title": "Logical Tests",
    "section": "",
    "text": "Logical tests are used extensively in coding in general, and coding in R is no exception. By a logical test, we mean an expression that evaluates to either TRUE or FALSE (or sometimes NA).",
    "crumbs": [
      "Logical tests"
    ]
  },
  {
    "objectID": "logical_tests.html#comparison-operators",
    "href": "logical_tests.html#comparison-operators",
    "title": "Logical Tests",
    "section": "Comparison operators",
    "text": "Comparison operators\nCertain logical tests (but not all) involve the use of comparison operators. The most common comparison operators are:\n\nColumn details\n\n\n\n\n\n\n\n\nOperator\nDescription\nExample\nResult\n\n\n\n\n==\nEqual to\nx == 5\nTRUE if x is 5, otherwise FALSE\n\n\n!=\nNot equal to\nx != 5\nTRUE if x is not 5, otherwise FALSE\n\n\n&lt;\nLess than\nx &lt; 5\nTRUE if x is less than 5, otherwise FALSE\n\n\n&gt;\nGreater than\nx &gt; 5\nTRUE if x is greater than 5, otherwise FALSE\n\n\n&lt;=\nLess than or equal to\nx &lt;= 5\nTRUE if x is less than or equal to 5, otherwise FALSE\n\n\n&gt;=\nGreater than or equal to\nx &gt;= 5\nTRUE if x is greater than or equal to 5, otherwise FALSE\n\n\n\nLet’s pick apart a few of these for a moment:\n== – Why can’t we just use =? Although we’ve been using &lt;- for assignment in R, but = can also be used for assignment. So, we need a different operator, ==, when we want to compare whether two values are equal.\n!= – This operator checks if two values are not equal. It is the opposite of ==. Notice that ! is used to indicate negation, and we can also use it to turn TRUE into FALSE and vice versa.\n&lt;, &gt;, &lt;=, &gt;= – These operators are used not only to compare numerical values, but they can also be used to compare character data (for example, 'aa' &lt; 'ab' is TRUE) and date values (for example, as.Date('2025-01-01') &gt; as.Date('2023-07-06') is TRUE)",
    "crumbs": [
      "Logical tests"
    ]
  },
  {
    "objectID": "logical_tests.html#logical-tests-on-vectors-and-matrices",
    "href": "logical_tests.html#logical-tests-on-vectors-and-matrices",
    "title": "Logical Tests",
    "section": "Logical tests on vectors and matrices",
    "text": "Logical tests on vectors and matrices\nWhen we use comparison operators on vectors or matrices, R will perform the comparison element-wise. For example:\n\n# Vector example\nx &lt;- c(1, 2, 3, 4, 5)\nx &gt; 3\n\n[1] FALSE FALSE FALSE  TRUE  TRUE\n\n\n\n# Matrix example - first create the matrix\nx &lt;- matrix(c(1, 2, 3, 4, 5, 6), nrow = 2)\nx\n\n     [,1] [,2] [,3]\n[1,]    1    3    5\n[2,]    2    4    6\n\n\n\n# Matrix example - perform the test\nx &gt;= 4\n\n      [,1]  [,2] [,3]\n[1,] FALSE FALSE TRUE\n[2,] FALSE  TRUE TRUE\n\n\nThere’s also a special operator, %in%, that we can use to return a TRUE or FALSE depending on whether a particular value is or is not present in a vector or matrix:\n\nnames &lt;- c('Ali', 'Bob', 'Charlotta')\n'Divya' %in% names\n\n[1] FALSE\n\n\n\nThe many uses of logical tests\nLogical tests are used in conditional statements, such as if statements, and in loops, such as for and while loops. They are also used in subsetting data frames and vectors.",
    "crumbs": [
      "Logical tests"
    ]
  },
  {
    "objectID": "import_export.html",
    "href": "import_export.html",
    "title": "Importing and Exporting Data",
    "section": "",
    "text": "Text-based data formats are very common, because they are human-readable, they don’t require any special software to read, and they can be read in by many different programming languages. Text-based formats include CSV (comma-separated values) and its variants such as TSV (tab-separated values), JSON (JavaScript Object Notation), YAML, and XML.\nWe’re going to focus on tabular formats such as CSV; by tabular, we mean that the data represented in the file is in a table format, with rows and columns. In a CSV, values going across a row are separated by commas; there can be other variants (such as TSV) that use a different character as a separator.\nA raw CSV file might look something like this:\nTime,Country Name,Country Code,GDP (current US$) [NY.GDP.MKTP.CD],\"Population, total [SP.POP.TOTL]\",\"Life expectancy at birth, total (years) [SP.DYN.LE00.IN]\"\n2014,Gabon,GAB,18203966896,1978399,66.07\n2014,\"Gambia, The\",GMB,1229461721,2164528,62.576\n2014,Georgia,GEO,17966015109,3719414,73.105\n...\nIn R, we can read such a file into our environment using the read.csv() function. Here’s how it might look:\n\n\nWrite code to read in a file from a file named mydata.csv located in your project’s data folder.\n\n\nSolution\n\n# Read a CSV file\ndata &lt;- read.csv(\"data/mydata.csv\")\nhead(data)\n\nLet’s read in the World Development Indicators (WDI) data that’s available in the Data downloads section. The file is named wdi.csv. Download it to your computer; for most people, the file will download to your Downloads folder.\nBefore we proceed, let’s talk about using folders to organize the files in your R project (or any data analysis project). We can keep things organized by creating separate folders for data, plots, and perhaps one for other results as well. For example, your project might look like this:\n├── wdi_analysis.R\n├── wdi_summary.R\n├── data\n│   ├── wdi.csv\n│   ├── another_data_file.csv\n├── plots\n│   ├── continents_gdp.pdf\n│   ├── gdp_longitudinal.pdf\netc.\nWe can make folders programmatically in R, using the dir.create() function. Let’s create a data folder in your project:\n\ndir.create('data')\n\nWarning in dir.create(\"data\"): 'data' already exists\n\n\nNow, locate the wdi.csv file that you downloaded, and copy or move it to your RStudio project’s data folder.\n\nwdi &lt;- read.csv('data/wdi.csv', na.strings = \"..\")",
    "crumbs": [
      "Importing and Exporting Data"
    ]
  },
  {
    "objectID": "import_export.html#challenge",
    "href": "import_export.html#challenge",
    "title": "Importing and Exporting Data",
    "section": "",
    "text": "Write code to read in a file from a file named mydata.csv located in your project’s data folder.\n\n\nSolution\n\n# Read a CSV file\ndata &lt;- read.csv(\"data/mydata.csv\")\nhead(data)\n\nLet’s read in the World Development Indicators (WDI) data that’s available in the Data downloads section. The file is named wdi.csv. Download it to your computer; for most people, the file will download to your Downloads folder.\nBefore we proceed, let’s talk about using folders to organize the files in your R project (or any data analysis project). We can keep things organized by creating separate folders for data, plots, and perhaps one for other results as well. For example, your project might look like this:\n├── wdi_analysis.R\n├── wdi_summary.R\n├── data\n│   ├── wdi.csv\n│   ├── another_data_file.csv\n├── plots\n│   ├── continents_gdp.pdf\n│   ├── gdp_longitudinal.pdf\netc.\nWe can make folders programmatically in R, using the dir.create() function. Let’s create a data folder in your project:\n\ndir.create('data')\n\nWarning in dir.create(\"data\"): 'data' already exists\n\n\nNow, locate the wdi.csv file that you downloaded, and copy or move it to your RStudio project’s data folder.\n\nwdi &lt;- read.csv('data/wdi.csv', na.strings = \"..\")",
    "crumbs": [
      "Importing and Exporting Data"
    ]
  },
  {
    "objectID": "packages.html",
    "href": "packages.html",
    "title": "Packages",
    "section": "",
    "text": "R comes with a core set of functions that allow you to do basic things like read data, manipulate data, and make simple plots. But R’s real power comes from the thousands of packages that extend R’s capabilities. Packages are collections of functions, data, and documentation that others have written to solve specific problems or perform specific tasks.",
    "crumbs": [
      "Packages in R"
    ]
  },
  {
    "objectID": "packages.html#other-ways-of-installing-packages",
    "href": "packages.html#other-ways-of-installing-packages",
    "title": "Packages",
    "section": "Other ways of installing packages",
    "text": "Other ways of installing packages\nWhen you install using install.packages('somePackage'), R will look for the package on CRAN (the Comprehensive R Archive Network). This is the most common way to install packages, but there are other ways as well:\n\nGitHub: Some packages are hosted on GitHub rather than CRAN. You can install these packages using the devtools package. For example, to install the ggplot2 package from GitHub, you would run:\ninstall.packages(\"devtools\")  # Install devtools if you haven't already\nlibrary(devtools)\ninstall_github(\"tidyverse/ggplot2\")\nYou can even develop your own packages and load them from your local computer. This is a bit more advanced, but writing (and publishing) your own packages can be very useful and is a great way to share your work with others.",
    "crumbs": [
      "Packages in R"
    ]
  },
  {
    "objectID": "data_wrangling.html",
    "href": "data_wrangling.html",
    "title": "Data Wrangling",
    "section": "",
    "text": "“Data wrangling” is the process of reshaping and/or restructuring data. The type of data wrangling you might do depends on what your next steps are. For example, data wrangling to produce a summary table might require a different target “shape” than if you wanted to perform statistical data analysis, or if you wanted to perform data visualization. So, it all depends, and there is MUCH to talk about here. But it’s unusual to NOT have to do at least some data wrangling after you start with raw data.\n\nR tools for data wrangling\nAlthough we can do some data wrangling in “base R”, let’s go right to using some libraries that can make data wrangling much easier.\nWe’re going to start with the dplyr package, which is part of the tidyverse set of packages, and it provides a “grammar” for data manipulation. The tidyr package (also part of the tidyverse) provides functions to help you “tidy” your data, which is a specific type of data wrangling. More on this to come.",
    "crumbs": [
      "Data wrangling"
    ]
  },
  {
    "objectID": "resources.html",
    "href": "resources.html",
    "title": "Resources for getting help and learning more",
    "section": "",
    "text": "R Libguide @ GW Libraries - Dan’s curated link of only the best R sites and resources",
    "crumbs": [
      "Resources"
    ]
  },
  {
    "objectID": "resources.html#section",
    "href": "resources.html#section",
    "title": "Data Downloads",
    "section": "",
    "text": "R Libguide @ GW Libraries - Dan’s curated link of only the best R sites and resources",
    "crumbs": [
      "Resources"
    ]
  },
  {
    "objectID": "resources.html#r-workshops",
    "href": "resources.html#r-workshops",
    "title": "Resources for getting help and learning more",
    "section": "R Workshops:",
    "text": "R Workshops:\nCoding Workshops @ GW Libraries",
    "crumbs": [
      "Resources"
    ]
  },
  {
    "objectID": "resources.html#individualized-consultations",
    "href": "resources.html#individualized-consultations",
    "title": "Resources for getting help and learning more",
    "section": "Individualized consultations:",
    "text": "Individualized consultations:\nCoding Consultations with a software developer librarian skilled in R or Python programming.\nData consultations with graduate students in Academic Commons who are skilled in statistics and statistical analysis using R, Python, SAS, SPSS, STATA, and Excel.",
    "crumbs": [
      "Resources"
    ]
  },
  {
    "objectID": "resources.html#web-resources",
    "href": "resources.html#web-resources",
    "title": "Resources for getting help and learning more",
    "section": "",
    "text": "R Libguide @ GW Libraries - Dan’s curated link of only the best R sites and resources",
    "crumbs": [
      "Resources"
    ]
  },
  {
    "objectID": "resources.html#community",
    "href": "resources.html#community",
    "title": "Resources for getting help and learning more",
    "section": "Community",
    "text": "Community\nGW Coders - Bi-weekly presentations (often with free pizza!) and a super useful Slack community. Open to anyone at GW interested in learning about coding.",
    "crumbs": [
      "Resources"
    ]
  },
  {
    "objectID": "factors.html",
    "href": "factors.html",
    "title": "Factor Variables",
    "section": "",
    "text": "A data variable can either be continuous or categorical. Continuous variables can take on any value within a range, while categorical variables can only take on a limited number of values.\nLet’s look for a moment at different types and subtypes of variables that we might have:\n\n\n\nData Types. Source: https://bookdown.org/ejvanholm/Textbook/displaying-data.html\n\n\nLet’s focus for a moment on Categorical data. Categorical data might have values that are either text or numeric:\n\nText variables representing categorical data could look like:\n\n'control', 'treatment'\n'red', 'blue', 'green'\n'good', 'better', 'best'\n\nNumbers can also be used to represent categories:\n\n0, 1 (e.g. for control and treatment)\n1, 4, 2 (e.g. for red, blue, green)\n1, 2, 3 (e.g. for good, better, best)\n\n\nIn R, categorical variables are called factors. Factors can be either ordered or unordered. So 'control', 'treatment' would be an unordered factor, while 'good', 'better', 'best' would be an ordered factor.",
    "crumbs": [
      "Factors"
    ]
  },
  {
    "objectID": "functions.html#what-does-a-function-look-like",
    "href": "functions.html#what-does-a-function-look-like",
    "title": "Functions",
    "section": "",
    "text": "A function consists of the name of the function, followed by parentheses (), which may contain arguments (also called parameters). For example, here is a function call to the mean function, which computes the mean of a numeric vector:\n\nmy_numbers &lt;- c(-50, 1, 2, 3, 4, 5, 100, 101, 600)\nmean(my_numbers)\n\n[1] 85.11111\n\n\nFunctions may have many parameters, in which case we generally name the parameters when we call the function. For example, the mean function has a second parameter called trim, which specifies how much of the data to “trim” from each end before computing the mean. The default value is 0, meaning no trimming. But we can specify a different value if we want:\n\nmean(my_numbers, trim = 0.2)\n\n[1] 30.85714\n\n\nParameters are implicitly passed “in order” based on the way the function is defined, which you can see in the documentation (see the next section!). So if you don’t name the parameters, you have to pass them in the correct order. For example, this is equivalent to the previous call:\n\nmean(my_numbers, 0.2)\n\n[1] 30.85714\n\n\nHowever, it’s usually better style to name the parameters, especially if there are many of them.",
    "crumbs": [
      "Functions"
    ]
  },
  {
    "objectID": "functions.html#anonymous-functions",
    "href": "functions.html#anonymous-functions",
    "title": "Functions",
    "section": "Anonymous functions",
    "text": "Anonymous functions\nThere are situations in R when you may want to define a small function locally. In some languages, this is called a “lambda function” or an “anonymous function”. Notice that we never even give the function a name; it’s only available in its limited local context:\ndo_something(some_data, function = function(x) x*3)",
    "crumbs": [
      "Functions"
    ]
  }
]