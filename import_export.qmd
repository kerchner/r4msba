---
title: "Importing and Exporting Data"
format:
  html:
    toc: false
---

# Text-based formats

Text-based data formats are very common, because they are human-readable, they don't require any special software to read, and they can be read in by many different programming languages. Text-based formats include CSV (comma-separated values) and its variants such as TSV (tab-separated values), JSON (JavaScript Object Notation), YAML, and XML.

We're going to focus on tabular formats such as CSV; by tabular, we mean that the data represented in the file is in a table format, with rows and columns. In a CSV, values going across a row are separated by commas; there can be other variants (such as TSV) that use a different character as a separator.

A raw CSV file might look something like this:

```         
Time,Country Name,Country Code,GDP (current US$) [NY.GDP.MKTP.CD],"Population, total [SP.POP.TOTL]","Life expectancy at birth, total (years) [SP.DYN.LE00.IN]"
2014,Gabon,GAB,18203966896,1978399,66.07
2014,"Gambia, The",GMB,1229461721,2164528,62.576
2014,Georgia,GEO,17966015109,3719414,73.105
...
```

In R, we can read such a file into our environment using the `read.csv()` function. Here's how it might look:

## Challenge:

Write code to read in a file from a file named `mydata.csv` located in your project's `data` folder.

<details>

<summary>Solution</summary>

``` r
# Read a CSV file
data <- read.csv("data/mydata.csv")
head(data)
```

</details>

Let's read in the World Development Indicators (WDI) data that's available in the [Data downloads](data.html) section. The file is named `wdi.csv`. Download it to your computer; for most people, the file will download to your Downloads folder.

Before we proceed, let's talk about using folders to organize the files in your R project (or any data analysis project). We can keep things organized by creating separate folders for data, plots, and perhaps one for other results as well. For example, your project might look like this:

```         
├── wdi_analysis.R
├── wdi_summary.R
├── data
│   ├── wdi.csv
│   ├── another_data_file.csv
├── plots
│   ├── continents_gdp.pdf
│   ├── gdp_longitudinal.pdf
```

etc.

We can make folders programmatically in R, using the `dir.create()` function. Let's create a `data` folder in your project:

```{r}
dir.create('data')
```

Now, locate the `wdi.csv` file that you downloaded, and copy or move it to your RStudio project's `data` folder.

```{r}
wdi <- read.csv('data/wdi.csv', na.strings = "..")
```

```{r}
```

# Excel

To load Excel files, you can use the `readxl` package. Install it if you haven't already:

```{r}
install.packages("readxl")
```

Then you can read in an Excel file like this:

``` r
library(readxl)
my_excel_data <- read_excel("data/mydata.xlsx", sheet = "Sheet1")
```

Note that we specified the `sheet` argument, because Excel workbooks can have multiple sheets. **If you don't specify a sheet, `read_excel()` will read in the first sheet by default.**

# Other statistical software

You can read in data files from the Stata, SPSS and SAS statistical packages using the [`haven`](https://haven.tidyverse.org/){target="_blank"} package. The `haven` package is part of the tidyverse, so if you have the tidyverse installed, you already have `haven`. `haven` can read in files with the following extensions:

-   Stata: `.dta` using `read_dta()`
-   SPSS: `.sav` using `read_sav()`
-   SAS: `.sas7bdat` and `.sas7bcat` using `read_sas()`

`haven` can also write out files in these formats, with the `write_dta()`, `write_sav()` and `write_xpt()` functions.
